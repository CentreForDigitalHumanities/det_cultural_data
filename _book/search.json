[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Data exploration toolkit for cultural data: structure, clean, visualize, and run a preliminary analysis",
    "section": "",
    "text": "Preface\nThis is a Quarto book"
  },
  {
    "objectID": "preface.html",
    "href": "preface.html",
    "title": "1  Preface",
    "section": "",
    "text": "This is a Quarto book"
  },
  {
    "objectID": "parts/preliminaries/set_up.html",
    "href": "parts/preliminaries/set_up.html",
    "title": "2  Setting up",
    "section": "",
    "text": "Amazing set up instructions"
  },
  {
    "objectID": "summary.html",
    "href": "summary.html",
    "title": "7  Summary",
    "section": "",
    "text": "In summary, this book has no content whatsoever."
  },
  {
    "objectID": "parts/data_analysis/ch1_reading_data.html",
    "href": "parts/data_analysis/ch1_reading_data.html",
    "title": "4  Reading data",
    "section": "",
    "text": "from myutils.functions import question_box, list_to_html\n\nThe first thing we need to do is loading the data. This means taking the file where the data is currently stored and transfer that data here, in our working environment. As we are working with Python, this means transfering all the data in a Python object. Which object? There are Python libraries (code written by other developers) that are been specifically designed to the task of data analysis. One of these libraries, or (using the Python vocabulary) packages, is called pandas. So what we are going to do is reading our .csv file (coma separated file, where columns are separated by a coma) and storing the read information into a pandas DataFrame. How do we do all this? Using pandas and python specifically designed methods and functions.\n\ntask = 'Task: Loading data'\nprocess = list_to_html([\n    'Localise the csv file;',\n    'Have a look at it;',\n    'Transfering data to the Python working environment.'\n    ])\ntools = list_to_html([\n    'Python &lt;code&gt;pandas&lt;/code&gt; library;',\n    '&lt;pandas&gt; DataFrame to contain the data;',\n    '&lt;code&gt;.read_csv()&lt;/code&gt; method.',\n    ])\ncode = list_to_html([\n    \"&lt;code&gt;import pandas as pd&lt;/code&gt;, we first import the package &lt;code&gt;pandas&lt;/code&gt; in our working environment in order to use all its functionalities. \\\n    In order to tell Python we want to use &lt;code&gt;pandas&lt;/code&gt; functionalities we need to specify &lt;code&gt;pandas&lt;/code&gt; every time we use one of \\\n    its functions. To make our life easier, we assign to the package an alias, a nickname, so that we do not neet to write &lt;code&gt;pandas&lt;/code&gt; \\\n    all the times, but just the abbreviation &lt;code&gt;pd&lt;/code&gt;;\",\n    \"&lt;code&gt;data_file = 'data/data.csv'&lt;/code&gt;, we store the relative path of our data file as a string (between single quotes) to a Python variable called &lt;code&gt;data_file&lt;/code&gt;;\",\n    \"&lt;code&gt;df = pd.read_csv(data_file)&lt;/code&gt;, we use the &lt;code&gt;pandas&lt;/code&gt; method &lt;code&gt;.read_csv()&lt;/code&gt; to read our data file and we store the result on a Python variable called &lt;code&gt;df&lt;/code&gt; (data frame);\",\n    \"&lt;code&gt;print(type(df))&lt;/code&gt;, we first apply the Python function &lt;code&gt;type()&lt;/code&gt; to the just initialised variable df to check what is its type. We print the result on the screen using the Python function &lt;code&gt;print()&lt;/code&gt;.\"\n    ])\nquestion_box(task=task,tools=tools,process=process,code=code)\n\n\n\n\n \n            \n                    \n                        \n                        \n                            Task: Loading data\n                        \n                    \n            \n        \n            \n                \n                    \n                    \n                        What to do?\n                    \n                \n                \n                    Localise the csv file;Have a look at it;Transfering data to the Python working environment.\n                \n                \n        \n            \n                \n                    \n                    \n                        (Python) Tools\n                    \n                \n                \n                    Python pandas library DataFrame to contain the data.read_csv() method\n                            \n                \n        \n            \n                \n                    \n                    \n                        Coding\n                    \n                \n                \n                    import pandas as pd, we first import the package pandas in our working environment in order to use all its functionalities.     In order to tell Python we want to use pandas functionalities we need to specify pandas every time we use one of     its functions. To make our life easier, we assign to the package an alias, a nickname, so that we do not neet to write pandas     all the times, but just the abbreviation pd;data_file = 'data/data.csv', we store the relative path of our data file as a string (between single quotes) to a Python variable called data_file;df = pd.read_csv(data_file), we use the pandas method .read_csv() to read our data file and we store the result on a Python variable called df (data frame);print(type(df)), we first apply the Python function type() to the just initialised variable df to check what is its type. We print the result on the screen using the Python function print().\n                       \n                \n        \n\n\n\nimport pandas as pd\ndata_file = 'data/data.csv'\ndf = pd.read_csv(data_file)\nprint(type(df))\n\n&lt;class 'pandas.core.frame.DataFrame'&gt;\n\n\nNice! We managed to transfer our data into a Python object, specifically a pandas.core.frame.DataFrame, or simply (from now on) a DataFrame. However, a lot of things can go wrong when going from one data format to another, so it is a good idea to have a first look at the data.\n\ntask = 'Task: Have a first look at the data'\nprocess = 'Visualize the first 10 lines of data, just to check that everything looks \"ok\"'\ntools = '&lt;code&gt;.head()&lt;/code&gt; method'\ncode = '&lt;code&gt;pd.head(10)&lt;/code&gt;, calling the &lt;code&gt;head(10)&lt;/code&gt; method on the DataFrame df we will visualise the first 10 lines of the DataFrame (we wrote 10, but you can use whatever number you want). \\\nThis method, as a matter of fact, shows you only the \"head\", the beginning, of your data.'\nquestion_box(task=task,tools=tools,process=process,code=code)\n\n \n            \n                    \n                        \n                        \n                            Task: Have a first look at the data\n                        \n                    \n            \n        \n            \n                \n                    \n                    \n                        What to do?\n                    \n                \n                \n                    Visualize the first 10 lines of data, just to check that everything looks \"ok\"\n                \n                \n        \n            \n                \n                    \n                    \n                        (Python) Tools\n                    \n                \n                \n                    .head() method\n                            \n                \n        \n            \n                \n                    \n                    \n                        Coding\n                    \n                \n                \n                    pd.head(10), calling the head(10) method on the DataFrame df we will visualise the first 10 lines of the DataFrame (we wrote 10, but you can use whatever number you want). This method, as a matter of fact, shows you only the \"head\", the beginning, of your data.\n                       \n                \n        \n\n\n\ndf.head(10)\n\n\n\n\n\n\n\n\nYear of arrival at port of disembarkation\nVoyage ID\nVessel name\nVoyage itinerary imputed port where began (ptdepimp) place\nVoyage itinerary imputed principal place of slave purchase (mjbyptimp)\nVoyage itinerary imputed principal port of slave disembarkation (mjslptimp) place\nVOYAGEID2\nCaptives arrived at 1st port\nCaptain's name\n\n\n\n\n0\n1714.0\n16109\nFreeke Gally\nBristol\nNaN\nKingston\nNaN\n283.0\nNeale, Alexander\n\n\n1\n1713.0\n16110\nGreyhound Gally\nBristol\nNaN\nJamaica, place unspecified\nNaN\nNaN\nSelkirk, Alexander&lt;br/&gt; Forrest, Henry\n\n\n2\n1714.0\n16111\nJacob\nBristol\nNaN\nKingston\nNaN\n130.0\nNicholls, Philip\n\n\n3\n1714.0\n16112\nJason Gally\nBristol\nNaN\nPort Royal\nNaN\n278.0\nPlummer, John\n\n\n4\n1713.0\n16113\nLawford Gally\nBristol\nAfrica, port unspecified\nNewcastle (Nevis)\nNaN\nNaN\nStretton, Joseph\n\n\n5\n1714.0\n16114\nMercy Gally\nBristol\nAfrica, port unspecified\nBarbados, place unspecified\nNaN\n190.0\nScott, John\n\n\n6\n1714.0\n16115\nMermaid Gally\nBristol\nCape Verde Islands\nKingston\nNaN\n72.0\nBanbury, John&lt;br/&gt; Copinger, James\n\n\n7\n1713.0\n16116\nMorning Star\nBristol\nAfrica, port unspecified\nCharleston\nNaN\nNaN\nPoole, Nicholas\n\n\n8\n1714.0\n16117\nPeterborough\nBristol\nAfrica, port unspecified\nBarbados, place unspecified\nNaN\n200.0\nShawe, John&lt;br/&gt; Martin, Joseph\n\n\n9\n1713.0\n16118\nResolution\nBristol\nGold Coast, port unspecified\nBarbados, place unspecified\nNaN\n255.0\nWilliams, Charles\n\n\n\n\n\n\n\nComparing what we see here with our .csv file it seems that everything went well. We have the data organised in rows and columns. Each column has a name and the table is populated by our data. Some are numbers, some are names and places, some are symbols, some are NaN. We consider our data successfully loaded and ready to be used. It is not time yet to run data analysis, after having loaded the data we need to correctly understand which information contains, then we need to “clean” it, and after that, finally, we can proceed with some data analysis. This is just the beginning, but the best is yet to come!"
  }
]