{
  "hash": "714b7a70e50256df40f22da572366cba",
  "result": {
    "markdown": "---\ntitle: \"Cleaning data\"\nexecute:   \n  enabled: true\n  error: true\n  freeze: auto\n---\n\n\n\n## Previous steps {.unnumbered}\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\ndata_file = 'data/data.csv'\ndf = pd.read_csv(data_file)\nprint(df.shape)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(36151, 9)\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\ncolumn_names = df.columns\ndf.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=3}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year of arrival at port of disembarkation</th>\n      <th>Voyage ID</th>\n      <th>Vessel name</th>\n      <th>Voyage itinerary imputed port where began (ptdepimp) place</th>\n      <th>Voyage itinerary imputed principal place of slave purchase (mjbyptimp)</th>\n      <th>Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place</th>\n      <th>VOYAGEID2</th>\n      <th>Captives arrived at 1st port</th>\n      <th>Captain's name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1714.0</td>\n      <td>16109</td>\n      <td>Freeke Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Kingston</td>\n      <td>NaN</td>\n      <td>283.0</td>\n      <td>Neale, Alexander</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1713.0</td>\n      <td>16110</td>\n      <td>Greyhound Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Jamaica, place unspecified</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Selkirk, Alexander&lt;br/&gt; Forrest, Henry</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1714.0</td>\n      <td>16111</td>\n      <td>Jacob</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Kingston</td>\n      <td>NaN</td>\n      <td>130.0</td>\n      <td>Nicholls, Philip</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1714.0</td>\n      <td>16112</td>\n      <td>Jason Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Port Royal</td>\n      <td>NaN</td>\n      <td>278.0</td>\n      <td>Plummer, John</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1713.0</td>\n      <td>16113</td>\n      <td>Lawford Gally</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Newcastle (Nevis)</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Stretton, Joseph</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\nNow that we got some familiarity with our dataset, it is time to clean our data, i.e. to get rid of all those NaN values and anything else that might effect our data analysis. Where to start? Well, inspecting the DataFrame by eye, we see several NaNs in the first 5 rows of our DataFrame. The first column we see NaNs is \"Voyage itinerary imputed principal place of slave purchase\", the fourth column (index 5). It would be nice to check if also other column have NaNs.<br>\nLet's start with the first column, \"Year of arrival at port of disembarkation\" (index 0), let's check if this column contains any NaN and then we will repeat the same process for all the other columns.\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\narr_year = df.iloc[:,0]\narr_year_na = arr_year.isna()\nprint(arr_year_na)\nprint('Total number of NaNs in the first column:',arr_year_na.sum())\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0        False\n1        False\n2        False\n3        False\n4        False\n         ...  \n36146    False\n36147    False\n36148    False\n36149    False\n36150    False\nName: Year of arrival at port of disembarkation, Length: 36151, dtype: bool\nTotal number of NaNs in the first column: 1\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\nsolution = 'The first column contains 1 NaN value'\nquestion_box(solution=solution)\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\nIn this way we found our that the first column has 1 NaN (or na) value, that would have been quite hard to spot by eye scrolling 36151 lines! <br>\nIt is great that we found 1 NaN in the first column, but where exactly it is located? What's the corresponding Voyage ID of that value?\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\ndf[arr_year_na]\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year of arrival at port of disembarkation</th>\n      <th>Voyage ID</th>\n      <th>Vessel name</th>\n      <th>Voyage itinerary imputed port where began (ptdepimp) place</th>\n      <th>Voyage itinerary imputed principal place of slave purchase (mjbyptimp)</th>\n      <th>Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place</th>\n      <th>VOYAGEID2</th>\n      <th>Captives arrived at 1st port</th>\n      <th>Captain's name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>32248</th>\n      <td>NaN</td>\n      <td>91909</td>\n      <td>Kitty</td>\n      <td>Liverpool</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>NaN</td>\n      <td>Fisher, Joseph</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n\n::: {.cell-output .cell-output-display execution_count=9}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\nIn this way we can inspect NaNs one by one and we can make a decision about how to handle them. In our DataFrame there are thousands of NaNs (as you will see in a minute) and going through ALL of them one by one is not a good idea. Let's first try to figure out if the other columns have also NaNs and how many are they. The process will be quite straightforward as we already did it for one of the columns, so what we need to do now is to repeat the same procedure for all the other columns.\n\n::: {.cell execution_count=10}\n\n::: {.cell-output .cell-output-display execution_count=10}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n``` {.python .cell-code}\nfor column_name in column_names:\n    selected_column = df[column_name]\n    selected_column_na = selected_column.isna()\n    n_nan = selected_column_na.sum()\n    print(column_name,'has',n_nan,'NaN')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nYear of arrival at port of disembarkation has 1 NaN\nVoyage ID has 0 NaN\nVessel name has 1614 NaN\nVoyage itinerary imputed port where began (ptdepimp) place has 4508 NaN\nVoyage itinerary imputed principal place of slave purchase (mjbyptimp)  has 2210 NaN\nVoyage itinerary imputed principal port of slave disembarkation (mjslptimp) place has 4191 NaN\nVOYAGEID2 has 36101 NaN\nCaptives arrived at 1st port has 17743 NaN\nCaptain's name has 4028 NaN\n```\n:::\n:::\n\n\nand if we want to keep in mind the column index of each column...\n\n::: {.cell execution_count=12}\n``` {.python .cell-code}\nfor i,column_name in enumerate(column_names): \\\n    print(f\"{i}) {column_name} has {df[column_name].isna().sum()} NaN\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n0) Year of arrival at port of disembarkation has 1 NaN\n1) Voyage ID has 0 NaN\n2) Vessel name has 1614 NaN\n3) Voyage itinerary imputed port where began (ptdepimp) place has 4508 NaN\n4) Voyage itinerary imputed principal place of slave purchase (mjbyptimp)  has 2210 NaN\n5) Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place has 4191 NaN\n6) VOYAGEID2 has 36101 NaN\n7) Captives arrived at 1st port has 17743 NaN\n8) Captain's name has 4028 NaN\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\nAt this point we have a general idea of the amount of data missing in our DataFrame. The following question is how to deal with this missing data? There are several things we can do, the easiest option would be just exclude it from our DataFrame. However, in order to answer a research question, we often do not need to use or explore ALL the available information and we would usually be interested in some parameters more than others. In this case our data selection could be performed looking at one or more specific columns. What to do with the rest of the NaNs? We can either leave them as they are and trying to figure out how our analysis program will \"digest\" these values or find good substitute for them. The value of this substitute will depend on the data type of the columns containing the NaN and on our decision. For example the NaN in the columns containing a descriptive string, like the vessel name or the starting port, could be substituted by the string \"unknown\". NaNs in the \"Captives arrived [...]\" column could be left as they are (you may be tempted to change them to 0, but zero captives is quite different from unknown number of captives) or substituted by, for example, the average of captives during the same year. <br>\nEach choice will have different implications to our final results, the most important thing in this stage is to clearly document our criteria for filtering NaN. In our specific case we will be mostly interested in the data containing the number of captives, so we want to filter our all those rows where the number of captives is NaN. We will then exclude the columns VOYAGEID2 as we already have a voyage ID and it is not listed in the data [variable description](https://www.slavevoyages.org/voyage/about#variable-list/2/en/). To resume, here there are our cleaning criteria:\n- All the rows not containing data about the number of captives have been removed;\n- All the NaN values in columns with descriptive information (e.g. names) have been substituted with \"unknown\";\n- The column VOYAGEID2 has been removed from the DataFrame.\n\n::: {.cell execution_count=14}\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\n# Display the name of the columns first\nprint(df.columns)\n\n# Select our target columns for clearning the data\ncolumn_to_remove = 'VOYAGEID2'\ncolumn_to_remove_nan = 'Captives arrived at 1st port'\n\n# Perform Data Cleaning visualising the result step by step\n# step1, removing column VOYAGEID2 from the DataFrame\ncleaned_df_step1 = df.drop(column_to_remove,axis=1)\ncleaned_df_step1.head(5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex(['Year of arrival at port of disembarkation', 'Voyage ID', 'Vessel name',\n       'Voyage itinerary imputed port where began (ptdepimp) place',\n       'Voyage itinerary imputed principal place of slave purchase (mjbyptimp) ',\n       'Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place',\n       'VOYAGEID2', 'Captives arrived at 1st port', 'Captain's name'],\n      dtype='object')\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=15}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year of arrival at port of disembarkation</th>\n      <th>Voyage ID</th>\n      <th>Vessel name</th>\n      <th>Voyage itinerary imputed port where began (ptdepimp) place</th>\n      <th>Voyage itinerary imputed principal place of slave purchase (mjbyptimp)</th>\n      <th>Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place</th>\n      <th>Captives arrived at 1st port</th>\n      <th>Captain's name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1714.0</td>\n      <td>16109</td>\n      <td>Freeke Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Kingston</td>\n      <td>283.0</td>\n      <td>Neale, Alexander</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>1713.0</td>\n      <td>16110</td>\n      <td>Greyhound Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Jamaica, place unspecified</td>\n      <td>NaN</td>\n      <td>Selkirk, Alexander&lt;br/&gt; Forrest, Henry</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1714.0</td>\n      <td>16111</td>\n      <td>Jacob</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Kingston</td>\n      <td>130.0</td>\n      <td>Nicholls, Philip</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1714.0</td>\n      <td>16112</td>\n      <td>Jason Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Port Royal</td>\n      <td>278.0</td>\n      <td>Plummer, John</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1713.0</td>\n      <td>16113</td>\n      <td>Lawford Gally</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Newcastle (Nevis)</td>\n      <td>NaN</td>\n      <td>Stretton, Joseph</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\n# step2, removing all the rows haveing NaN in the \"Captives arrived at 1st port\" column\ncleaned_df_step2 = cleaned_df_step1.dropna(subset=[column_to_remove_nan])\ncleaned_df_step2.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year of arrival at port of disembarkation</th>\n      <th>Voyage ID</th>\n      <th>Vessel name</th>\n      <th>Voyage itinerary imputed port where began (ptdepimp) place</th>\n      <th>Voyage itinerary imputed principal place of slave purchase (mjbyptimp)</th>\n      <th>Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place</th>\n      <th>Captives arrived at 1st port</th>\n      <th>Captain's name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1714.0</td>\n      <td>16109</td>\n      <td>Freeke Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Kingston</td>\n      <td>283.0</td>\n      <td>Neale, Alexander</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1714.0</td>\n      <td>16111</td>\n      <td>Jacob</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Kingston</td>\n      <td>130.0</td>\n      <td>Nicholls, Philip</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1714.0</td>\n      <td>16112</td>\n      <td>Jason Gally</td>\n      <td>Bristol</td>\n      <td>NaN</td>\n      <td>Port Royal</td>\n      <td>278.0</td>\n      <td>Plummer, John</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1714.0</td>\n      <td>16114</td>\n      <td>Mercy Gally</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Barbados, place unspecified</td>\n      <td>190.0</td>\n      <td>Scott, John</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1714.0</td>\n      <td>16115</td>\n      <td>Mermaid Gally</td>\n      <td>Bristol</td>\n      <td>Cape Verde Islands</td>\n      <td>Kingston</td>\n      <td>72.0</td>\n      <td>Banbury, John&lt;br/&gt; Copinger, James</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\n# step3, changing all the other NaN into unknown\ncleaned_df = cleaned_df_step2.fillna(\"unknown\")\ncleaned_df.head(5)\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year of arrival at port of disembarkation</th>\n      <th>Voyage ID</th>\n      <th>Vessel name</th>\n      <th>Voyage itinerary imputed port where began (ptdepimp) place</th>\n      <th>Voyage itinerary imputed principal place of slave purchase (mjbyptimp)</th>\n      <th>Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place</th>\n      <th>Captives arrived at 1st port</th>\n      <th>Captain's name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1714.0</td>\n      <td>16109</td>\n      <td>Freeke Gally</td>\n      <td>Bristol</td>\n      <td>unknown</td>\n      <td>Kingston</td>\n      <td>283.0</td>\n      <td>Neale, Alexander</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1714.0</td>\n      <td>16111</td>\n      <td>Jacob</td>\n      <td>Bristol</td>\n      <td>unknown</td>\n      <td>Kingston</td>\n      <td>130.0</td>\n      <td>Nicholls, Philip</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1714.0</td>\n      <td>16112</td>\n      <td>Jason Gally</td>\n      <td>Bristol</td>\n      <td>unknown</td>\n      <td>Port Royal</td>\n      <td>278.0</td>\n      <td>Plummer, John</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1714.0</td>\n      <td>16114</td>\n      <td>Mercy Gally</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Barbados, place unspecified</td>\n      <td>190.0</td>\n      <td>Scott, John</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1714.0</td>\n      <td>16115</td>\n      <td>Mermaid Gally</td>\n      <td>Bristol</td>\n      <td>Cape Verde Islands</td>\n      <td>Kingston</td>\n      <td>72.0</td>\n      <td>Banbury, John&lt;br/&gt; Copinger, James</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\n# step4, checking how much data we filtered out\nprint(cleaned_df.shape)\nn_filtered_rows = len(df)-len(cleaned_df)\nper_cent = (n_filtered_rows/len(df))*100\nprint('We filtered out: ',len(df)-len(cleaned_df),', corresponding to about', round(per_cent), '% of our initial data')\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(18408, 8)\nWe filtered out:  17743 , corresponding to about 49 % of our initial data\n```\n:::\n:::\n\n\nIt seems that because of our filtering, almost half of our data will be excluded from the analysis. This is a quite large percent and we may decide to re-think our filtering criteria to include more data. For example, we could substitue the missing value in the Captives column with an avarage number of captived per trip. For the purpose of our workshop, we will keep the current filtering criteria and keep our filtered DataFrame as it is.\n\nAt this point we obtained a \"clean\" DataFrame, ```cleaned_df```, containing 18408 rows with values organised in 8 columns. We can now start diving deep in the analysis of our DataFrame, we are ready to interrogate this dataset and see which kind of story it is going to tell us.\n\n",
    "supporting": [
      "ch3_data_cleaning_files/figure-pdf"
    ],
    "filters": []
  }
}