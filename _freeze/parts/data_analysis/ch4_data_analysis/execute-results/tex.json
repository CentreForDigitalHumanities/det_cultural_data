{
  "hash": "ccd1d228ac63f7d617859b4ad459079d",
  "result": {
    "markdown": "---\ntitle: \"Analysing data\"\nexecute:   \n  enabled: true\n  error: true\n  freeze: auto\n---\n\n\n\n## Previous steps {.unnumbered}\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nimport pandas as pd\ndata_file = 'data/data.csv'\ndf = pd.read_csv(data_file)\ncleaned_df = df.drop('VOYAGEID2',axis=1).dropna(subset=['Captives arrived at 1st port']).fillna(\"unknown\")\ncleaned_col_names = cleaned_df.columns\ncleaned_df.head(10)\n```\n\n::: {.cell-output .cell-output-display execution_count=2}\n```{=html}\n<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>Year of arrival at port of disembarkation</th>\n      <th>Voyage ID</th>\n      <th>Vessel name</th>\n      <th>Voyage itinerary imputed port where began (ptdepimp) place</th>\n      <th>Voyage itinerary imputed principal place of slave purchase (mjbyptimp)</th>\n      <th>Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place</th>\n      <th>Captives arrived at 1st port</th>\n      <th>Captain's name</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1714.0</td>\n      <td>16109</td>\n      <td>Freeke Gally</td>\n      <td>Bristol</td>\n      <td>unknown</td>\n      <td>Kingston</td>\n      <td>283.0</td>\n      <td>Neale, Alexander</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1714.0</td>\n      <td>16111</td>\n      <td>Jacob</td>\n      <td>Bristol</td>\n      <td>unknown</td>\n      <td>Kingston</td>\n      <td>130.0</td>\n      <td>Nicholls, Philip</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1714.0</td>\n      <td>16112</td>\n      <td>Jason Gally</td>\n      <td>Bristol</td>\n      <td>unknown</td>\n      <td>Port Royal</td>\n      <td>278.0</td>\n      <td>Plummer, John</td>\n    </tr>\n    <tr>\n      <th>5</th>\n      <td>1714.0</td>\n      <td>16114</td>\n      <td>Mercy Gally</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Barbados, place unspecified</td>\n      <td>190.0</td>\n      <td>Scott, John</td>\n    </tr>\n    <tr>\n      <th>6</th>\n      <td>1714.0</td>\n      <td>16115</td>\n      <td>Mermaid Gally</td>\n      <td>Bristol</td>\n      <td>Cape Verde Islands</td>\n      <td>Kingston</td>\n      <td>72.0</td>\n      <td>Banbury, John&lt;br/&gt; Copinger, James</td>\n    </tr>\n    <tr>\n      <th>8</th>\n      <td>1714.0</td>\n      <td>16117</td>\n      <td>Peterborough</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Barbados, place unspecified</td>\n      <td>200.0</td>\n      <td>Shawe, John&lt;br/&gt; Martin, Joseph</td>\n    </tr>\n    <tr>\n      <th>9</th>\n      <td>1713.0</td>\n      <td>16118</td>\n      <td>Resolution</td>\n      <td>Bristol</td>\n      <td>Gold Coast, port unspecified</td>\n      <td>Barbados, place unspecified</td>\n      <td>255.0</td>\n      <td>Williams, Charles</td>\n    </tr>\n    <tr>\n      <th>10</th>\n      <td>1714.0</td>\n      <td>16119</td>\n      <td>Richard and William</td>\n      <td>Bristol</td>\n      <td>unknown</td>\n      <td>Port Royal</td>\n      <td>55.0</td>\n      <td>Beckham, George&lt;br/&gt; Spring, Martin</td>\n    </tr>\n    <tr>\n      <th>11</th>\n      <td>1713.0</td>\n      <td>16120</td>\n      <td>Rotchdale Gally</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Barbados, place unspecified</td>\n      <td>96.0</td>\n      <td>Hitchings, John</td>\n    </tr>\n    <tr>\n      <th>12</th>\n      <td>1714.0</td>\n      <td>16121</td>\n      <td>Tunbridge Gally</td>\n      <td>Bristol</td>\n      <td>Africa, port unspecified</td>\n      <td>Barbados, place unspecified</td>\n      <td>200.0</td>\n      <td>Skinner, Peter</td>\n    </tr>\n  </tbody>\n</table>\n</div>\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nprint(\"Index) Column name\") \nfor i,name in enumerate(cleaned_df.columns): \n    print(i,\")\",name) \n```\n\n::: {.cell-output .cell-output-stdout}\n```\nIndex) Column name\n0 ) Year of arrival at port of disembarkation\n1 ) Voyage ID\n2 ) Vessel name\n3 ) Voyage itinerary imputed port where began (ptdepimp) place\n4 ) Voyage itinerary imputed principal place of slave purchase (mjbyptimp) \n5 ) Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place\n6 ) Captives arrived at 1st port\n7 ) Captain's name\n```\n:::\n:::\n\n\n# Data Analysis {.unnumbered}\n\nIt is finally time to ask questions to our data. Let's start with some simple ones regaring the time span of our dataset.\n\n::: {.cell execution_count=4}\n\n::: {.cell-output .cell-output-display execution_count=4}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\narrival_year = cleaned_df.iloc[:,0]\nfirst_year = min(arrival_year)\nlast_year = max(arrival_year)\nyear_span = last_year-first_year\n\nprint(first_year)\nprint(last_year)\nprint(year_span)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1520.0\n1866.0\n346.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\narrival_year_raw = df.iloc[:,0]\nfirst_year_raw = min(arrival_year_raw)\nlast_year_raw = max(arrival_year_raw)\nyear_span_raw = last_year_raw-first_year_raw\n\nprint(first_year_raw)\nprint(last_year_raw)\nprint(year_span_raw)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n1514.0\n1866.0\n352.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=7}\n\n::: {.cell-output .cell-output-display execution_count=7}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\nWe can keep asking questions about numerical values. We focused on time in our last question, let's focus on the number of captives this time.\n\n::: {.cell execution_count=8}\n\n::: {.cell-output .cell-output-display execution_count=8}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nn_captives = cleaned_df.iloc[:,6]\ntot_captives = sum(n_captives)\nave_cap_per_voyage = tot_captives/len(cleaned_df)\nave_cap_per_year = tot_captives/year_span\nprint('Total n. of captives:',tot_captives)\nprint('Average captives per voyage',round(ave_cap_per_voyage))\nprint('Average captives per year',round(ave_cap_per_year))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTotal n. of captives: 5082756.0\nAverage captives per voyage 276\nAverage captives per year 14690\n```\n:::\n:::\n\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nfiltered_rows = len(df)-len(cleaned_df)\ntot_captives_ext = tot_captives + ave_cap_per_voyage*filtered_rows\nave_cap_per_year_adj = tot_captives_ext/year_span_raw\nprint('Extimated total n. of captives',round(tot_captives_ext))\nprint('Adjusted average captives per year', round(ave_cap_per_year_adj))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nExtimated total n. of captives 9981894\nAdjusted average captives per year 28358\n```\n:::\n:::\n\n\n::: {.cell execution_count=11}\n\n::: {.cell-output .cell-output-display execution_count=11}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\nSo far we computed numbers, but data can be most effectively described using visualization. In our DataFrame we have information about three different locations: the place where the voyage started, the principal port of slave purchase, and the principal port of slave disembarkation. Let's have a closer look at these locations.\n\n::: {.cell execution_count=12}\n\n::: {.cell-output .cell-output-display execution_count=12}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=13}\n``` {.python .cell-code}\nstart_port = cleaned_df.iloc[:,3]\nstart_port_counts = start_port.value_counts()\nprint(type(start_port_counts))\nstart_port_counts\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n<class 'pandas.core.series.Series'>\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=13}\n```\nVoyage itinerary imputed port where began (ptdepimp) place\nLiverpool                       3227\nunknown                         2005\nLondon                          1874\nBahia, place unspecified        1815\nRio de Janeiro                  1464\n                                ... \nMangaratiba                        1\nMediterranean coast (France)       1\nCanasÃ­                             1\nSanta Catarina                     1\nPortland                           1\nName: count, Length: 176, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=14}\n``` {.python .cell-code}\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfig, new_ax = plt.subplots(nrows=1,ncols=1,figsize=(8,8))\nfilter = start_port_counts > 50\nx_data = start_port_counts[filter]\ny_data = start_port_counts.index[filter]                                                                                                                                                           \nsns.barplot(ax=new_ax,x=x_data,y=y_data)\n```\n\n::: {.cell-output .cell-output-display execution_count=14}\n```\n<Axes: xlabel='count', ylabel='Voyage itinerary imputed port where began (ptdepimp) place'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](ch4_data_analysis_files/figure-pdf/cell-15-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=15}\n``` {.python .cell-code}\nmain_pur_port = cleaned_df.iloc[:,4]\nmain_pur_counts = main_pur_port.value_counts()\nmain_pur_counts\n```\n\n::: {.cell-output .cell-output-display execution_count=15}\n```\nVoyage itinerary imputed principal place of slave purchase (mjbyptimp) \nAfrica, port unspecified                                3177\nLuanda                                                  1447\nWest Central Africa and St. Helena, port unspecified    1139\nBonny                                                    853\nGold Coast, port unspecified                             787\n                                                        ... \nPetit Mesurado                                             1\nEva                                                        1\nPokesoe (Princes Town)                                     1\nSassandra                                                  1\nSugary (Siekere)                                           1\nName: count, Length: 161, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=16}\n``` {.python .cell-code}\nfig, ax = plt.subplots(1,1,figsize=(8,8))\nfilter = main_pur_counts > 200\nsns.barplot(ax=ax,x=main_pur_counts[filter],y=main_pur_counts.index[filter])\n```\n\n::: {.cell-output .cell-output-display execution_count=16}\n```\n<Axes: xlabel='count', ylabel='Voyage itinerary imputed principal place of slave purchase (mjbyptimp) '>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](ch4_data_analysis_files/figure-pdf/cell-17-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=17}\n``` {.python .cell-code}\nmain_dis_port = cleaned_df.iloc[:,5]\nmain_dis_counts = main_dis_port.value_counts()\nmain_dis_counts\n```\n\n::: {.cell-output .cell-output-display execution_count=17}\n```\nVoyage itinerary imputed principal port of slave disembarkation (mjslptimp) place\nBahia, place unspecified       1720\nRio de Janeiro                 1651\nKingston                       1576\nBarbados, place unspecified    1524\nHavana                          893\n                               ... \nFrance, place unspecified         1\nSanta Marta                       1\nDois Rios                         1\nMaceiÃ³                            1\nBonny                             1\nName: count, Length: 240, dtype: int64\n```\n:::\n:::\n\n\n::: {.cell execution_count=18}\n``` {.python .cell-code}\nfig, ax = plt.subplots(1,1,figsize=(8,8))\nfilter = main_dis_counts > 150\nsns.barplot(ax=ax,x=main_dis_counts[filter],y=main_dis_counts.index[filter])\n```\n\n::: {.cell-output .cell-output-display execution_count=18}\n```\n<Axes: xlabel='count', ylabel='Voyage itinerary imputed principal port of slave disembarkation (mjslptimp) place'>\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](ch4_data_analysis_files/figure-pdf/cell-19-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=19}\n\n::: {.cell-output .cell-output-display execution_count=19}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\nLet's try to make now a different type of visualization, a time series, i.e. a plot where we see how parameters change over time\n\n::: {.cell execution_count=20}\n\n::: {.cell-output .cell-output-display execution_count=20}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=21}\n``` {.python .cell-code}\ncol_to_group = 'Year of arrival at port of disembarkation'\ncol_to_sum = 'Captives arrived at 1st port'\ndf_per_year = cleaned_df.groupby(col_to_group)[col_to_sum].sum()\nprint(df_per_year.shape)\ndf_per_year\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n(298,)\n```\n:::\n\n::: {.cell-output .cell-output-display execution_count=21}\n```\nYear of arrival at port of disembarkation\n1520.0       44.0\n1526.0      115.0\n1527.0       46.0\n1532.0      589.0\n1534.0      354.0\n           ...   \n1862.0    11407.0\n1863.0     6739.0\n1864.0     3298.0\n1865.0      795.0\n1866.0      700.0\nName: Captives arrived at 1st port, Length: 298, dtype: float64\n```\n:::\n:::\n\n\n::: {.cell execution_count=22}\n``` {.python .cell-code}\nfig, ax = plt.subplots(1,1,figsize=(8,8))\nsns.lineplot(ax=ax,x=df_per_year.index,y=df_per_year)\nplt.grid()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning:\n\nuse_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning:\n\nuse_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](ch4_data_analysis_files/figure-pdf/cell-23-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n::: {.cell execution_count=23}\n``` {.python .cell-code}\nmax_index = df_per_year.idxmax()\nmin_index = df_per_year.idxmin()\nmin_year = df_per_year[min_index]\nmax_year = df_per_year[max_index]\n\nprint('Min. n. of captives per year:', min_year,'on',min_index)\nprint('Max. n. of captives per year:', max_year,'on',max_index)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nMin. n. of captives per year: 2.0 on 1538.0\nMax. n. of captives per year: 79472.0 on 1829.0\n```\n:::\n:::\n\n\n::: {.cell execution_count=24}\n``` {.python .cell-code}\nsolution = 'The total number of captives is almost constant up to 1650, with the exception of two peaks around 1600 \\\nand 1622. The number increases steadily up to 1800 and decreases afterwords. The times series is not smooth, but it proceeds \\\nby low and high peek. The number of captives per year reaches its maximum on 1829 with almost 80 thousands slaves traded \\\nthat year. The minimum is 2 captives on 1538.'\nquestion_box(solution=solution)\n```\n\n::: {.cell-output .cell-output-display execution_count=24}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\nTime series are very interesting to describe the trends of phenomema at different scale. Our plot ticks are separated by 50 years, this is fine to visualise trends over centuries, but we cannot see what's happening on decades.\n\n::: {.cell execution_count=25}\n\n::: {.cell-output .cell-output-display execution_count=25}\n```\n<IPython.core.display.HTML object>\n```\n:::\n:::\n\n\n::: {.cell execution_count=26}\n``` {.python .cell-code}\ntime_filter = (df_per_year.index > 1700) & (df_per_year.index < 1750)\nfig, ax = plt.subplots(1,1,figsize=(8,8))\nx_data = df_per_year.index[time_filter]\ny_data = df_per_year[time_filter]\nsns.lineplot(ax=ax,x=x_data,y=y_data)\nplt.grid()\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning:\n\nuse_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n\n/opt/anaconda3/lib/python3.11/site-packages/seaborn/_oldcore.py:1119: FutureWarning:\n\nuse_inf_as_na option is deprecated and will be removed in a future version. Convert inf values to NaN before operating instead.\n\n```\n:::\n\n::: {.cell-output .cell-output-display}\n![](ch4_data_analysis_files/figure-pdf/cell-27-output-2.pdf){fig-pos='H'}\n:::\n:::\n\n\n",
    "supporting": [
      "ch4_data_analysis_files/figure-pdf"
    ],
    "filters": []
  }
}